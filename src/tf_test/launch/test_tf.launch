<launch>
    <!-- 
        流程介绍:
        1.准备工作:启动乌龟的GUI节点与键盘控制节点
        2.调用服务生成一只新乌龟
        3.发布两龟的坐标
        4.订阅坐标信息,并且转换成乌龟A相对于B的坐标信息,
            最后在生成控制乌龟B速度信息的速度信息
     -->
    <node pkg = 'turtlesim' type = 'turtlesim_node' name = 'turtle1' output = 'screen'/>
    <node pkg = 'turtlesim' type = 'turtle_teleop_key' name = 'key' output = 'screen'/>
    <!-- 2.调用服务生成一只新乌龟 -->
    <node pkg = 'tf_test' type = 'spawn_turtle.py' name = 'turtle2' output = 'screen'/>
    <!-- 发布两龟的坐标:
        复用之前的乌龟坐标发布功能
        调用前以参数形式传递乌龟名称,解析参数置换:订阅的话题消息 和 子级坐标系的名称 -->
    <node pkg = 'tf_test' type = 'pub_test.py' name = 'pub1' args = 'turtle1' output = 'screen'/>
    <node pkg = 'tf_test' type = 'pub_test.py' name = 'pub2' args = 'turtle2' output = 'screen'/>
    <!-- 订阅坐标信息,并且转换成乌龟A相对于B的坐标信息,最后在生成控制乌龟B速度信息的速度信息 -->
    <node pkg = 'tf_test' type = 'vel_test.py' name = 'velocity_ctrl' output = 'screen'/>
    


</launch>
